module Read_Encoder (
    input wire clk,            // Clock do sistema
    input wire rst_n,          // Reset síncrono (ativo baixo)
    input wire A,              // Sinal A (quadratura)
    input wire B,              // Sinal B (quadratura)
    output reg [1:0] dir       // Direção detectada: 00 → sem movimento, 01 → horário, 10 → anti-horário
);

    reg [1:0] A_d, B_d;  // Armazenando os valores anteriores de A e B

    always @(posedge clk or negedge rst_n) begin
        if (~rst_n) begin
            // Reset: sem movimento
            dir <= 2'b00;
            A_d <= 2'b00;
            B_d <= 2'b00;
        end else begin
            // Detectando transições
            if (A != A_d || B != B_d) begin
                if (A_d == 2'b00 && B_d == 2'b00 && A == 1'b1 && B == 1'b0) begin
                    // 00 → 10 → Sentido horário
                    dir <= 2'b01;
                end else if (A_d == 2'b00 && B_d == 2'b00 && A == 1'b0 && B == 1'b1) begin
                    // 00 → 01 → Sentido anti-horário
                    dir <= 2'b10;
                end else begin
                    // Caso contrário, sem movimento detectado
                    dir <= 2'b00;
                end
            end
        end

        // Atualiza os valores anteriores
        A_d <= A;
        B_d <= B;

        // Adicionando depuração para ver as mudanças de A, B e dir
        $display("CLK=%0t, rst_n=%b, A=%b, B=%b, dir=%b", $time, rst_n, A, B, dir);
    end

endmodule
